/**
 * @preserve
 * Gerador e Validador de CPF v5.0.1
 * http://tiagoporto.github.io/gerador-validador-cpf
 * Copyright (c) 2014-present Tiago Porto (http://tiagoporto.com)
 * Released under the MIT license
 */

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('core-js/modules/es.regexp.exec'), require('core-js/modules/es.string.replace'), require('core-js/modules/es.number.constructor'), require('core-js/modules/es.array.join'), require('core-js/modules/es.array.slice')) :
  typeof define === 'function' && define.amd ? define(['exports', 'core-js/modules/es.regexp.exec', 'core-js/modules/es.string.replace', 'core-js/modules/es.number.constructor', 'core-js/modules/es.array.join', 'core-js/modules/es.array.slice'], factory) :
  (global = global || self, factory(global.CPF = {}));
}(this, (function (exports) { 'use strict';

  var calcFirstChecker = function calcFirstChecker(firstNineDigits) {
    var sum = 0;

    for (var j = 0; j < 9; ++j) {
      sum += Number(firstNineDigits.charAt(j)) * (10 - j);
    }

    var lastSumChecker = sum % 11;
    var firstChecker = lastSumChecker < 2 ? 0 : 11 - lastSumChecker;
    return firstChecker;
  };
  var calcSecondChecker = function calcSecondChecker(cpfWithChecker1) {
    var sum = 0;

    for (var k = 0; k < 10; ++k) {
      sum += Number(cpfWithChecker1.charAt(k)) * (11 - k);
    }

    var lastSumChecker2 = sum % 11;
    var checker2 = lastSumChecker2 < 2 ? 0 : 11 - lastSumChecker2;
    return checker2;
  };

  var generateFirstDigits = function generateFirstDigits() {
    var digits = '';

    for (var i = 0; i < 9; ++i) {
      digits += String(Math.floor(Math.random() * 10));
    }

    return digits;
  };
  var hasCPFLength = function hasCPFLength(cpf) {
    if (cpf.length > 11) {
      return false;
    } else if (cpf.length < 11) {
      return false;
    }

    return true;
  }; // format option
  // true   return 000.000.000-00
  // false  return 00000000000

  var formatCPF = function formatCPF(cpf, format) {
    var digitsSeparator = '';
    var checkersSeparator = '';

    if (format) {
      digitsSeparator = '.';
      checkersSeparator = '-';
    }

    return cpf.slice(0, 3) + digitsSeparator + cpf.slice(3, 6) + digitsSeparator + cpf.slice(6, 9) + checkersSeparator + cpf.slice(9, 11);
  };
  var allDigitsAreEqual = function allDigitsAreEqual(digits) {
    for (var i = 0; i < 10; i++) {
      if (digits === Array(digits.length + 1).join(String(i))) {
        return true;
      }
    }

    return false;
  };

  /**
   * [Gerador e Validador de CPF](https://tiagoporto.github.io/gerador-validador-cpf)
   * @author Tiago Porto
   *
   * @function Generate
   * @param  {string} [formatOption="default"] - 'digits' | 'checker' | 'default'
   *
   * @returns {string}                  Valid and formatted CPF
   */

  var generate = function generate(_temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        format = _ref.format;

    var firstNineDigits = '';

    do {
      firstNineDigits = generateFirstDigits();
    } while (allDigitsAreEqual(firstNineDigits));

    var firstChecker = calcFirstChecker(firstNineDigits);
    var secondChecker = calcSecondChecker(firstNineDigits + firstChecker);
    var generatedCPF = "" + firstNineDigits + firstChecker + secondChecker;
    return formatCPF(generatedCPF, format);
  };
  /**
   *
   * [Gerador e Validador de CPF](https://tiagoporto.github.io/gerador-validador-cpf)
   * @author Tiago Porto
   *
   * @function Validate
   * @param  {string} value  CPF number
   *
   * @returns {boolean}                true = valid || false = invalid
   */

  var validate = function validate(value) {
    if (typeof value !== 'string') {
      return false;
    }

    var cleanCPF = String(value).replace(/\.|-|\s/g, '');
    var firstNineDigits = cleanCPF.substring(0, 9);
    var checker = cleanCPF.substring(9, 11);

    if (!hasCPFLength(cleanCPF) || allDigitsAreEqual(cleanCPF)) {
      return false;
    }

    var checker1 = calcFirstChecker(firstNineDigits);
    var checker2 = calcSecondChecker("" + firstNineDigits + checker1);
    return checker === "" + checker1 + checker2;
  };

  exports.generate = generate;
  exports.validate = validate;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
